#!/usr/bin/make -f
# Pipeline for the LINKS program
# Written by Murathan Goktas
#Default Parameters

# Input Names 
draft=draft
reads=readsFof

# Find the complete long read file name
#fastq=$(shell test -f $(reads).fq.gz && echo "true")
#fasta=$(shell test -f $(reads).fa.gz && echo "true")
#ifeq ($(fastq), true)
#long_reads=$(reads).fq.gz
#endif
#ifeq ($(fasta), true)
#long_reads=$(reads).fa.gz
#endif

# parameters
d=4000
k=15
t=2
o=0
e=0.1
z=500
p=0.001
x=0
v=0

l=5
a=0.3

base_name=k$k_t$t_l$l_a$a_o$o_e$e $min_links_a$max_link_ratio

# ARCS ARKS Common Parameters
barcode_counts=barcodeMultiplicityArcs
c=5
m=50-10000
z=500
s=98
r=0.05
e=30000
D=false
dist_upper=false
d=0
gap=100
B=20

# ARCS Specific Parameters
s=98
cut=250

# ARKS Specific Parameters
j=0.55
k=30
t=8

# LINKS Parameters
l=5
a=0.3
bin=$(dir $(realpath $(firstword $(MAKEFILE_LIST))))

SHELL=bash -e -o pipefail
ifeq ($(shell zsh -e -o pipefail -c 'true' 2>/dev/null; echo $$?), 0)
#Set pipefail to ensure that all commands of a pipe succeed.
SHELL=zsh -e -o pipefail
# Report run time and memory usage with zsh.
export REPORTTIME=1
export TIMEFMT=time user=%U system=%S elapsed=%E cpu=%P memory=%M job=%J
endif

# Use pigz or bgzip for parallel compression if available.
ifneq ($(shell command -v pigz),)
gzip=pigz -p$t
else
ifneq ($(shell command -v bgzip),)
gzip=bgzip -@$t
else
gzip=gzip
endif
endif

# Record run time and memory usage in a file using GNU time.
ifdef time
ifneq ($(shell command -v gtime),)
gtime=command gtime -v -o $@.time
else
gtime=command time -v -o $@.time
endif
endif


.PHONY: all version help clean tigmint arcs arcs-tigmint arcs-with-tigmint arks arks-tigmint arks-with-tigmint
.DELETE_ON_ERROR:
.SECONDARY: 


all: help 
# Help
help:
	@echo "Usage: ./links-make [COMMAND] [OPTION=VALUE]..."
	@echo "    Commands:"
	@echo ""
	@echo "	links		pair contigs and create scaffolds"
	@echo "	help            display this help page"
	@echo "	version         display the software version"
	@echo "	clean           remove intermediate files"
	@echo ""
	@echo "    General Options:"
	@echo ""
	@echo "	draft           draft name [draft]. File must have .fasta or .fa extension"
	@echo "	reads           read name [reads]. File must have .fastq.gz or .fq.gz extension"
	@echo "	time		logs time and memory usage to file for main steps (Set to 1 to enable logging)"	
	@echo ""
	@echo "     Options:"
	@echo ""
	@echo "	t		number of threads used [8]"
    @echo "	t		number of threads used [8]"
    @echo "	t		number of threads used [8]"
    @echo "	t		number of threads used [8]"
    @echo "	t		number of threads used [8]"
    @echo "	t		number of threads used [8]"

clean:
	rm -f *.pairing_issues *.tsv
	@echo "Clean Done"

version:
	@echo "links-make v1.0.0"

#Preprocessing

# Create a .fa file that is soft linked to .fasta 
%.fa: %.fasta
	ln -s $^ $@

# Create a .fq.gz file that is soft linked to .fastq.gz 
%.fq.gz: %.fastq.gz
	ln -s $^ $@

# Make an Empty fof File
empty.fof:
	touch $@

# Run LINKS
LINKS: $(base_name).scaffold.fa

%.scaffold.fa: %.tigpair_checkpoint.tsv empty.fof
    $(gtime) LINKS -f $draft -s empty.fof -b $b -v $v -l $l -a $a
%.tigpair_checkpoint.tsv: $draft $readsFof
    $(gtime) LINKS.o -f $draft -s readsFof -d $d -k $k -t $t -o $o -e $e -z $z -p $p -x $x -v $v -b $base_name




# Run LINKS
# default
%_c$c_m$m_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa: %.renamed.fa empty.fof %_c$c_m$m_s$s_r$r_e$e_z$z_l$l_a$a.tigpair_checkpoint.tsv
	$(gtime) LINKS -f $< -s empty.fof -b $(patsubst %.scaffolds.fa,%,$@) -l $l -a $a -z $z
# long
%_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa: %.renamed.fa empty.fof %_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.tigpair_checkpoint.tsv
	$(gtime) LINKS -f $< -s empty.fof -b $(patsubst %.scaffolds.fa,%,$@) -l $l -a $a -z $z
# kmer
%_c$c_m$m_k$k_r$r_e$e_z$z_l$l_a$a.scaffolds.fa: %.renamed.fa empty.fof %_c$c_m$m_k$k_r$r_e$e_z$z_l$l_a$a.tigpair_checkpoint.tsv
	$(gtime) LINKS -f $< -s empty.fof -b $(patsubst %.scaffolds.fa,%,$@) -l $l -a $a -z $z
# long kmer
%_c$c_m$m_cut$(cut)_k$k_r$r_e$e_z$z_l$l_a$a.scaffolds.fa: %.renamed.fa empty.fof %_c$c_m$m_cut$(cut)_k$k_r$r_e$e_z$z_l$l_a$a.tigpair_checkpoint.tsv
	$(gtime) LINKS -f $< -s empty.fof -b $(patsubst %.scaffolds.fa,%,$@) -l $l -a $a -z $z


#Run Tigmint
arcs-tigmint: tigmint arcs-with-tigmint
arks-tigmint: tigmint arks-with-tigmint

# Main
tigmint: $(draft).tigmint.fa
# Run tigmint
$(draft).tigmint.fa: $(draft).fa $(reads).fq.gz
	$(gtime) tigmint tigmint draft=$(draft) reads=$(reads) minsize=$(minsize) as=$(as) nm=$(nm) dist=$(dist) mapq=$(mapq) trim=$(trim) span=$(span) window=$(window) t=$t 

#Pre-processing long reads; cut into shorter segments (pseudo-linked reads)
%.cut$(cut).fq.gz: $(long_reads)
	$(gtime) sh -c 'gunzip -c $< | $(bin)../Examples/long-to-linked-pe -l$(cut) --fastq | $(gzip) > $@'


#Run ARCS
arcs: $(draft)_c$c_m$m_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa
arcs-with-tigmint: $(draft).tigmint_c$c_m$m_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa
arcs-long: $(draft)_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_l$l_a$a.scaffolds.fa
arks: $(draft)_c$c_m$m_k$k_r$r_e$e_z$z_l$l_a$a.scaffolds.fa
arks-with-tigmint: $(draft).tigmint_c$c_m$m_k$k_r$r_e$e_z$z_l$l_a$a.scaffolds.fa
arks-long: $(draft)_c$c_m$m_cut$(cut)_k$k_r$r_e$e_z$z_l$l_a$a.scaffolds.fa

# Convert Scaffold Names into Numerical Numbers
%.renamed.fa: %.fa
	perl -ne 'chomp; if(/>/){$$ct+=1; print ">$$ct\n";}else{print "$$_\n";} ' < $^ > $@ 

# Make bwa index from Draft Assembly
%.renamed.fa.bwt: %.renamed.fa
	$(gtime) bwa index $^ 

# Use bwa mem to Align Reads to Draft Assembly and Sort it
%.sorted.bam: %.renamed.fa $(reads).fq.gz %.renamed.fa.bwt
	$(gtime) sh -c 'bwa mem -t$t -C -p $< $(reads).fq.gz | samtools view -Sb - | samtools sort -@$t -n - -o $@' 

	
# Create an fof File Containing the bam File
%_bamfiles.fof: %.sorted.bam
	echo $^ > $@

# Run ARCS Program
%_c$c_m$m_s$s_r$r_e$e_z$z_original.gv: %.renamed.fa %_bamfiles.fof
ifneq ($D, true)
	$(gtime) arcs -f $< -a $(word 2,$^) -v -c $c -m $m -s $s -r $r -e $e -z $z -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) --barcode-counts $(barcode_counts).tsv
else ifneq ($(dist_upper), true)
	$(gtime) arcs -D -B $B -v -f $< -a $(word 2,$^) -c $c -m $m -s $s -r $r -e $e -z $z -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) --barcode-counts $(barcode_counts).tsv
else
	$(gtime) arcs -D -B $B --dist_upper -v -f $< -a $(word 2,$^) -c $c -m $m -s $s -r $r -e $e -z $z -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) --barcode-counts $(barcode_counts).tsv
endif

# long
%_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_original.gv: %.renamed.fa $(reads).cut$(cut).fq.gz
ifneq ($D, true)
	$(gtime) minimap2 -ax map-ont -y -t$t --secondary=no $< $(reads).cut$(cut).fq.gz | abyss-fixmate-ssq --all --qname | \
		samtools view -Sb - | samtools sort -@$t -O SAM -n - -o - | \
		arcs -f $< -v -c $c -m $m -s $s -r $r -e $e -z $z -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) --barcode-counts $(barcode_counts).tsv /dev/stdin
else ifneq ($(dist_upper), true)
	$(gtime) minimap2 -ax map-ont -y -t$t --secondary=no $< $(reads).cut$(cut).fq.gz | abyss-fixmate-ssq --all --qname | \
		samtools view -Sb - | samtools sort -@$t -O SAM -n - -o - | \
		arcs -D -B $B -v -f $< -c $c -m $m -s $s -r $r -e $e -z $z -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) --barcode-counts $(barcode_counts).tsv /dev/stdin
else
	$(gtime) minimap2 -ax map-ont -y -t$t --secondary=no $< $(reads).cut$(cut).fq.gz | abyss-fixmate-ssq --all --qname | \
		samtools view -Sb - | samtools sort -@$t -O SAM -n - -o - | \
		arcs -D -B $B --dist_upper -v -f $<  -c $c -m $m -s $s -r $r -e $e -z $z -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) --barcode-counts $(barcode_counts).tsv /dev/stdin
endif

# kmer
%_c$c_m$m_k$k_r$r_e$e_z$z_original.gv: %.renamed.fa $(reads).fq.gz
ifneq ($D, true)
	$(gtime) arcs --arks -v -f $< -c $c -m $m -r $r -e $e -z $z -j $j -k $k -t $t -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) $(word 2,$^) --barcode-counts $(barcode_counts).tsv

else ifneq ($(dist_upper), true)
	$(gtime) arcs --arks -v -D -B $B -f $< -c $c -m $m -r $r -e $e -z $z -j $j -k $k -t $t -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) $(word 2,$^) --barcode-counts $(barcode_counts).tsv
else
	$(gtime) arcs --arks -v -D -B $B --dist_upper -f $< -c $c -m $m -r $r -e $e -z $z -j $j -k $k -t $t -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) $(word 2,$^) --barcode-counts $(barcode_counts).tsv
endif

# long kmer
$(reads).barcode-multiplicity.tsv: $(long_reads)
	$(gtime) $(bin)/../src/long-to-linked-pe -l $(cut) -t $t -m2000 --bx-only -b $@ $<

%_c$c_m$m_cut$(cut)_k$k_r$r_e$e_z$z_original.gv: %.renamed.fa $(long_reads) $(reads).barcode-multiplicity.tsv
ifneq ($D, true)
	$(gtime) $(bin)/../src/long-to-linked-pe -l $(cut) -t $t -m2000 $(long_reads) |\
	 arcs --arks -v -f $< -c $c -m $m -r $r -e $e -z $z -j $j -k $k -t $t -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) -u $(reads).barcode-multiplicity.tsv /dev/stdin

else ifneq ($(dist_upper), true)
	$(gtime) $(bin)/../src/long-to-linked-pe -l $(cut) -t $t -m2000 $(long_reads) |\
	arcs --arks -v -D -B $B -f $< -c $c -m $m -r $r -e $e -z $z -j $j -k $k -t $t -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) -u $(reads).barcode-multiplicity.tsv /dev/stdin
else
	$(gtime) $(bin)/../src/long-to-linked-pe -l $(cut) -t $t -m2000 $(long_reads) |\
	arcs --arks -v -D -B $B --dist_upper -f $< -c $c -m $m -r $r -e $e -z $z -j $j -k $k -t $t -d $d --gap $(gap) -b $(patsubst %_original.gv,%,$@) -u $(reads).barcode-multiplicity.tsv /dev/stdin
endif

# Generate TSV from ARCS
# default
%_c$c_m$m_s$s_r$r_e$e_z$z.tigpair_checkpoint.tsv: %_c$c_m$m_s$s_r$r_e$e_z$z_original.gv %.renamed.fa
	python $(bin)../Examples/makeTSVfile.py $< $@ $(word 2,$^) 
# long
%_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z.tigpair_checkpoint.tsv: %_c$c_m$m_cut$(cut)_s$s_r$r_e$e_z$z_original.gv %.renamed.fa
	python $(bin)../Examples/makeTSVfile.py $< $@ $(word 2,$^) 
# kmer
%_c$c_m$m_k$k_r$r_e$e_z$z.tigpair_checkpoint.tsv: %_c$c_m$m_k$k_r$r_e$e_z$z_original.gv %.renamed.fa
	python $(bin)../Examples/makeTSVfile.py $< $@ $(word 2,$^)
# long kmer
%_c$c_m$m_cut$(cut)_k$k_r$r_e$e_z$z.tigpair_checkpoint.tsv: %_c$c_m$m_cut$(cut)_k$k_r$r_e$e_z$z_original.gv %.renamed.fa
	python $(bin)../Examples/makeTSVfile.py $< $@ $(word 2,$^)
	
# Adds a and l paramters to the filename
%_z$z_l$l_a$a.tigpair_checkpoint.tsv: %_z$z.tigpair_checkpoint.tsv
	ln -s $^ $@

# Make an Empty fof File
empty.fof:
	touch $@

